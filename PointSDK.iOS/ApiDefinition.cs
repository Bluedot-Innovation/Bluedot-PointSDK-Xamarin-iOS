using System;
using System.Runtime.InteropServices;
using CoreData;
using CoreGraphics;
using CoreLocation;
using Foundation;
using MapKit;
using ObjCRuntime;
using UserNotifications;

namespace PointSDK.iOS
{
    // @protocol BDPBluedotServiceDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface IBDPBluedotServiceDelegate
    {
        // @optional -(void)locationAuthorizationDidChangeFromPreviousStatus:(CLAuthorizationStatus)previousAuthorizationStatus toNewStatus:(CLAuthorizationStatus)newAuthorizationStatus;
        [Export("locationAuthorizationDidChangeFromPreviousStatus:toNewStatus:")]
        void LocationAuthorizationDidChangeFromPreviousStatus(CLAuthorizationStatus previousAuthorizationStatus, CLAuthorizationStatus newAuthorizationStatus);

        // @optional -(void)lowPowerModeDidChange:(_Bool)isLowPowerMode;
        [Export("lowPowerModeDidChange:")]
        void LowPowerModeDidChange(bool isLowPowerMode);

        // @optional -(void)bluedotServiceDidReceiveError:(NSError *)error;
        [Export("bluedotServiceDidReceiveError:")]
        void BluedotServiceDidReceiveError(NSError error);

        // @optional -(void)accuracyAuthorizationDidChangeFromPreviousAuthorization:(CLAccuracyAuthorization)previousAccuracyAuthorization toNewAuthorization:(CLAccuracyAuthorization)newAccuracyAuthorization;
        [Export("accuracyAuthorizationDidChangeFromPreviousAuthorization:toNewAuthorization:")]
        void AccuracyAuthorizationDidChangeFromPreviousAuthorization(CLAccuracyAuthorization previousAccuracyAuthorization, CLAccuracyAuthorization newAccuracyAuthorization);
    }

    // @protocol BDPGeoTriggeringEventDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface IBDPGeoTriggeringEventDelegate
    {
        // @optional -(void)didUpdateZoneInfo;
        [Export("didUpdateZoneInfo")]
        void DidUpdateZoneInfo();

        // @optional -(void)didEnterZone:(GeoTriggerEvent * _Nonnull)enterEvent;
        [Export("didEnterZone:")]
        void DidEnterZone(GeoTriggerEvent enterEvent);

        // @optional -(void)didExitZone:(GeoTriggerEvent * _Nonnull)exitEvent;
        [Export("didExitZone:")]
        void DidExitZone(GeoTriggerEvent exitEvent);
    }

    // @protocol BDPTempoTrackingDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface IBDPTempoTrackingDelegate
    {
        // @optional -(void)tempoTrackingDidExpire;
        [Export("tempoTrackingDidExpire")]
        void TempoTrackingDidExpire();

        // @optional -(void)tempoTrackingDidUpdate:(TempoTrackingUpdate *)tempoUpdate;
        [Export("tempoTrackingDidUpdate:")]
        void TempoTrackingDidUpdate(TempoTrackingUpdate tempoUpdate);

        // @required -(void)didStopTrackingWithError:(NSError *)error;
        [Abstract]
        [Export("didStopTrackingWithError:")]
        void DidStopTrackingWithError(NSError error);
    }

    // @interface BDZoneInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface BDZoneInfo
    {
        // @property (readonly, copy) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly, copy) NSString * _Nonnull ID;
        [Export("ID")]
        string ID { get; }

        // @property (readonly, copy) NSSet<BDFenceInfo *> * _Nonnull fences;
        [Export("fences", ArgumentSemantic.Copy)]
        NSSet<BDFenceInfo> Fences { get; }

        // @property (readonly) BOOL checkOut;
        [Export("checkOut")]
        bool CheckOut { get; }

        // @property (readonly, copy) NSDictionary<NSString *,NSString *> * _Nonnull customData;
        [Export("customData", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> CustomData { get; }

        // @property (readonly) Destination * _Nullable destination;
        [NullAllowed, Export("destination")]
        Destination Destination { get; }
    }

    // @interface BDLocationManager : CLLocationManager
    [BaseType(typeof(CLLocationManager))]
    [Protocol]
    interface BDLocationManager
    {
        // +(BDLocationManager *)instance;
        [Static]
        [Export("instance")]
        BDLocationManager Instance { get; }

        // @property (readonly, nonatomic) CLAuthorizationStatus authorizationStatus;
        [Export("authorizationStatus")]
        CLAuthorizationStatus AuthorizationStatus { get; }

        // -(void)initializeWithProjectId:(NSString * _Nonnull)projectId completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
        [Export("initializeWithProjectId:completion:")]
        void InitializeWithProjectId(string projectId, Action<NSError> completion);

        // -(BOOL)isInitialized;
        [Export("isInitialized")]
        bool IsInitialized { get; }

        // -(void)resetWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
        [Export("resetWithCompletion:")]
        void ResetWithCompletion(Action<NSError> completion);

        [Wrap("WeakTempoTrackingDelegate")]
        IBDPTempoTrackingDelegate TempoTrackingDelegate { get; set; }

        // @property id<BDPTempoTrackingDelegate> tempoTrackingDelegate;
        [NullAllowed, Export("tempoTrackingDelegate", ArgumentSemantic.Assign)]
        NSObject WeakTempoTrackingDelegate { get; set; }

        [Wrap("WeakBluedotServiceDelegate")]
        [NullAllowed]
        IBDPBluedotServiceDelegate BluedotServiceDelegate { get; set; }

        // @property id<BDPBluedotServiceDelegate> _Nullable bluedotServiceDelegate;
        [NullAllowed, Export("bluedotServiceDelegate", ArgumentSemantic.Assign)]
        NSObject WeakBluedotServiceDelegate { get; set; }

        [Wrap("WeakGeoTriggeringEventDelegate")]
        [NullAllowed]
        IBDPGeoTriggeringEventDelegate GeoTriggeringEventDelegate { get; set; }

        // @property id<BDPGeoTriggeringEventDelegate> _Nullable geoTriggeringEventDelegate;
        [NullAllowed, Export("geoTriggeringEventDelegate", ArgumentSemantic.Assign)]
        NSObject WeakGeoTriggeringEventDelegate { get; set; }

        // @property (readonly, nonatomic) NSSet<BDZoneInfo *> * zoneInfos;
        [Export("zoneInfos")]
        NSSet ZoneInfos { get; }

        // @property (nonatomic) BOOL backgroundLocationAccessForWhileUsing;
        [Export("backgroundLocationAccessForWhileUsing")]
        bool BackgroundLocationAccessForWhileUsing { get; set; }

        // -(void)setZone:(NSString *)zoneId disableByApplication:(BOOL)disable;
        [Export("setZone:disableByApplication:")]
        void SetZone(string zoneId, bool disable);

        // -(void)applicationContainsDisabledZone:(NSString *)zoneId completion:(void (^)(BOOL))completion;
        [Export("applicationContainsDisabledZone:completion:")]
        void ApplicationContainsDisabledZone(string zoneId, Action<bool> completion);

        // -(NSString *)installRef;
        [Export("installRef")]
        string InstallRef();

        // -(NSString *)sdkVersion;
        [Export("sdkVersion")]
        string SdkVersion();

        // -(NSDictionary *)customEventMetaData;
        // -(void)setCustomEventMetaData:(NSDictionary *)data;
        [Export("customEventMetaData")]
        NSDictionary CustomEventMetaData { get; set; }

        // -(void)startGeoTriggeringWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
        [Export("startGeoTriggeringWithCompletion:")]
        void StartGeoTriggeringWithCompletion(Action<NSError> completion);

        // -(void)startGeoTriggeringWithAppRestartNotificationTitle:(NSString * _Nonnull)notificationTitle notificationButtonText:(NSString * _Nonnull)notificationButtonText completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
        [Export("startGeoTriggeringWithAppRestartNotificationTitle:notificationButtonText:completion:")]
        void StartGeoTriggeringWithAppRestartNotificationTitle(string notificationTitle, string notificationButtonText, Action<NSError> completion);

        // -(BOOL)isGeoTriggeringRunning;
        [Export("isGeoTriggeringRunning")]
        bool IsGeoTriggeringRunning { get; }

        // -(void)stopGeoTriggeringWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
        [Export("stopGeoTriggeringWithCompletion:")]
        void StopGeoTriggeringWithCompletion([NullAllowed] Action<NSError> completion);

        // -(void)startTempoTrackingWithDestinationId:(NSString * _Nonnull)destinationId completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
        [Export("startTempoTrackingWithDestinationId:completion:")]
        void StartTempoTrackingWithDestinationId(string destinationId, Action<NSError> completion);

        // -(void)stopTempoTrackingWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
        [Export("stopTempoTrackingWithCompletion:")]
        void StopTempoTrackingWithCompletion(Action<NSError> completion);

        // -(BOOL)isTempoRunning;
        [Export("isTempoRunning")]
        bool IsTempoRunning { get; }

        // -(void)authorizationChangedWithManager:(CLLocationManager * _Nonnull)manager status:(CLAuthorizationStatus)status;
        [Export("authorizationChangedWithManager:status:")]
        void AuthorizationChangedWithManager(CLLocationManager manager, CLAuthorizationStatus status);
    }

    // @protocol BDPDeepCopy <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface BDPDeepCopy
    {
        // @required -(id)deepCopy;
        [Abstract]
        [Export("deepCopy")]
        NSObject DeepCopy { get; }
    }

    // @protocol BDPGeometry <BDPDeepCopy>
    [Protocol]
    interface BDPGeometry : BDPDeepCopy
    {
        // @required -(BOOL)intersects:(BDGeometry *)geometry;
        [Abstract]
        [Export("intersects:")]
        bool Intersects(BDGeometry geometry);

        // @required -(BOOL)isEnclosedBy:(BDGeometry *)geometry;
        [Abstract]
        [Export("isEnclosedBy:")]
        bool IsEnclosedBy(BDGeometry geometry);

        // @required -(BDBoundingBox *)boundingBox;
        [Abstract]
        [Export("boundingBox")]
        BDBoundingBox BoundingBox { get; }

        // @required -(BDPoint *)centroid;
        [Abstract]
        [Export("centroid")]
        BDPoint Centroid { get; }

        // @required -(BDLocationDistance)distanceTo:(BDGeometry *)geometry;
        [Abstract]
        [Export("distanceTo:")]
        double DistanceTo(BDGeometry geometry);

        // @required -(BDGeometryType)geometryType;
        [Abstract]
        [Export("geometryType")]
        string GeometryType { get; }
    }

    // @protocol BDPJSONSerializable <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface BDPJSONSerializable
    {
        // @required -(NSDictionary * _Nullable)dictionaryRepresentation;
        [Abstract]
        [NullAllowed, Export("dictionaryRepresentation")]
        NSDictionary DictionaryRepresentation { get; }
    }

    [Static]
    partial interface Constants
    {
        // extern const BDGeometryType BDGeometryTypeBoundingBox;
        [Field("BDGeometryTypeBoundingBox", "__Internal")]
        NSString BDGeometryTypeBoundingBox { get; }

        // extern const BDGeometryType BDGeometryTypeCircle;
        [Field("BDGeometryTypeCircle", "__Internal")]
        NSString BDGeometryTypeCircle { get; }

        // extern const BDGeometryType BDGeometryTypeLineString;
        [Field("BDGeometryTypeLineString", "__Internal")]
        NSString BDGeometryTypeLineString { get; }

        // extern const BDGeometryType BDGeometryTypePoint;
        [Field("BDGeometryTypePoint", "__Internal")]
        NSString BDGeometryTypePoint { get; }

        // extern const BDGeometryType BDGeometryTypePolygon;
        [Field("BDGeometryTypePolygon", "__Internal")]
        NSString BDGeometryTypePolygon { get; }
    }

    // @interface BDGeometry : NSObject <BDPGeometry>
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface BDGeometry : BDPGeometry
    {
    }

    // @protocol BDPValidatable <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface BDPValidatable
    {
        // @required -(BOOL)valid;
        [Abstract]
        [Export("valid")]
        bool Valid { get; }
    }

    // @interface BDBoundingBox : BDGeometry <NSCopying, BDPValidatable, NSSecureCoding>
    [BaseType(typeof(BDGeometry))]
    interface BDBoundingBox : INSCopying, BDPValidatable, INSSecureCoding
    {
        // -(instancetype)initWithNorth:(BDLocationDegrees)north west:(BDLocationDegrees)west south:(BDLocationDegrees)south east:(BDLocationDegrees)east;
        [Export("initWithNorth:west:south:east:")]
        IntPtr Constructor(double north, double west, double south, double east);

        // -(instancetype)initWithNorthEast:(BDPoint *)northEast southWest:(BDPoint *)southWest;
        [Export("initWithNorthEast:southWest:")]
        IntPtr Constructor(BDPoint northEast, BDPoint southWest);

        // -(instancetype)initWithCoordinateRegion:(MKCoordinateRegion)region;
        [Export("initWithCoordinateRegion:")]
        IntPtr Constructor(MKCoordinateRegion region);

        // -(MKCoordinateRegion)coordinateRegion;
        [Export("coordinateRegion")]
        MKCoordinateRegion CoordinateRegion { get; }

        // -(BDLocationDegrees)west;
        // -(void)setWest:(BDLocationDegrees)west;
        [Export("west")]
        double West { get; set; }

        // -(BDLocationDegrees)north;
        // -(void)setNorth:(BDLocationDegrees)north;
        [Export("north")]
        double North { get; set; }

        // -(BDLocationDegrees)east;
        // -(void)setEast:(BDLocationDegrees)east;
        [Export("east")]
        double East { get; set; }

        // -(BDLocationDegrees)south;
        // -(void)setSouth:(BDLocationDegrees)south;
        [Export("south")]
        double South { get; set; }

        // -(BDLocationDegrees)longitudeSpan;
        [Export("longitudeSpan")]
        double LongitudeSpan { get; }

        // -(BDLocationDegrees)latitudeSpan;
        [Export("latitudeSpan")]
        double LatitudeSpan { get; }

        // @property (nonatomic) BDPoint * northEast;
        [Export("northEast", ArgumentSemantic.Assign)]
        BDPoint NorthEast { get; set; }

        // @property (nonatomic) BDPoint * southWest;
        [Export("southWest", ArgumentSemantic.Assign)]
        BDPoint SouthWest { get; set; }

        // -(NSArray *)vertices;
        [Export("vertices")]
        NSObject[] Vertices { get; }
    }

    // @interface BDCircle : BDGeometry <NSSecureCoding>
    [BaseType(typeof(BDGeometry))]
    interface BDCircle : INSSecureCoding
    {
        // @property (nonatomic) BDPoint * center;
        [Export("center", ArgumentSemantic.Assign)]
        BDPoint Center { get; set; }

        // @property (nonatomic) BDLocationDistance radius;
        [Export("radius")]
        double Radius { get; set; }

        // -(instancetype)initWithCenter:(BDPoint *)center radius:(BDLocationDistance)radius;
        [Export("initWithCenter:radius:")]
        IntPtr Constructor(BDPoint center, double radius);

        // +(BDCircle *)circleWithCenter:(BDPoint *)center radius:(BDLocationDistance)radius;
        [Static]
        [Export("circleWithCenter:radius:")]
        BDCircle CircleWithCenter(BDPoint center, double radius);

        // -(BOOL)isEqualToCircle:(BDCircle *)circle;
        [Export("isEqualToCircle:")]
        bool IsEqualToCircle(BDCircle circle);
    }

    // @interface BDPoint : BDGeometry <NSCopying, NSSecureCoding>
    [BaseType(typeof(BDGeometry))]
    interface BDPoint : INSCopying, INSSecureCoding
    {
        // +(instancetype)pointWithLongitude:(BDLocationDegrees)longitude latitude:(BDLocationDegrees)latitude;
        [Static]
        [Export("pointWithLongitude:latitude:")]
        BDPoint PointWithLongitude(double longitude, double latitude);

        // -(instancetype)initWithLongitude:(BDLocationDegrees)longitude latitude:(BDLocationDegrees)latitude;
        [Export("initWithLongitude:latitude:")]
        IntPtr Constructor(double longitude, double latitude);

        // -(instancetype)initWithCoordinate:(BDLocationCoordinate2D)coordinate;
        [Export("initWithCoordinate:")]
        IntPtr Constructor(BDLocationCoordinate2D coordinate);

        // -(NSString *)latitudeString;
        [Export("latitudeString")]
        string LatitudeString { get; }

        // -(NSString *)longitudeString;
        [Export("longitudeString")]
        string LongitudeString { get; }

        // @property (nonatomic) BDLocationDegrees longitude;
        [Export("longitude")]
        double Longitude { get; set; }

        // @property (nonatomic) BDLocationDegrees latitude;
        [Export("latitude")]
        double Latitude { get; set; }

        // @property (readonly, nonatomic) BDLocationCoordinate2D coordinate;
        [Export("coordinate")]
        BDLocationCoordinate2D Coordinate { get; }

        // -(CGPoint)cgPoint;
        [Export("cgPoint")]
        CGPoint CgPoint { get; }

        // -(BOOL)isEqualToPoint:(BDPoint *)point;
        [Export("isEqualToPoint:")]
        bool IsEqualToPoint(BDPoint point);

        // -(BOOL)isOrigin;
        [Export("isOrigin")]
        bool IsOrigin { get; }
    }

    // @interface BDPolygonal : BDGeometry
    [BaseType(typeof(BDGeometry))]
    interface BDPolygonal
    {
        // -(NSUInteger)vertexCount;
        [Export("vertexCount")]
        nuint VertexCount { get; }

        // -(void)addVertex:(BDPoint *)vertex;
        [Export("addVertex:")]
        void AddVertex(BDPoint vertex);

        // @property (nonatomic) NSMutableArray * vertices;
        [Export("vertices", ArgumentSemantic.Assign)]
        NSMutableArray Vertices { get; set; }

        // -(BOOL)isClosed;
        [Export("isClosed")]
        bool IsClosed { get; }
    }

    // @interface BDLineString : BDPolygonal <NSSecureCoding>
    [BaseType(typeof(BDPolygonal))]
    interface BDLineString : INSSecureCoding
    {
        // +(instancetype)lineStringWithVertices:(NSArray *)vertices copy:(BOOL)copy;
        [Static]
        [Export("lineStringWithVertices:copy:")]
        BDLineString LineStringWithVertices(NSObject[] vertices, bool copy);

        // +(instancetype)lineWithStart:(BDPoint *)start end:(BDPoint *)end;
        [Static]
        [Export("lineWithStart:end:")]
        BDLineString LineWithStart(BDPoint start, BDPoint end);

        // -(instancetype)initWithVertices:(NSArray *)vertices copy:(BOOL)copy;
        [Export("initWithVertices:copy:")]
        IntPtr Constructor(NSObject[] vertices, bool copy);

        // -(instancetype)initWithStart:(BDPoint *)start end:(BDPoint *)end;
        [Export("initWithStart:end:")]
        IntPtr Constructor(BDPoint start, BDPoint end);

        // @property (nonatomic) BDPoint * start;
        [Export("start", ArgumentSemantic.Assign)]
        BDPoint Start { get; set; }

        // @property (nonatomic) BDPoint * end;
        [Export("end", ArgumentSemantic.Assign)]
        BDPoint End { get; set; }
    }

    // @interface BDPolygon : BDPolygonal <NSSecureCoding>
    [BaseType(typeof(BDPolygonal))]
    interface BDPolygon : INSSecureCoding
    {
        // +(instancetype)polygonWithVertices:(NSArray *)vertices copy:(BOOL)copy;
        [Static]
        [Export("polygonWithVertices:copy:")]
        BDPolygon PolygonWithVertices(NSObject[] vertices, bool copy);

        // +(instancetype)polygonWithLatLongCoordinates:(NSNumber *)scalar, ...;
        [Static, Internal]
        [Export("polygonWithLatLongCoordinates:", IsVariadic = true)]
        BDPolygon PolygonWithLatLongCoordinates(NSNumber scalar, IntPtr varArgs);
    }

    // @interface BDLocation : NSObject <BDPDeepCopy>
    [BaseType(typeof(NSObject))]
    interface BDLocation : BDPDeepCopy
    {
        // -(instancetype)initWithCLLocation:(CLLocation *)coreLocation;
        [Export("initWithCLLocation:")]
        IntPtr Constructor(CLLocation coreLocation);

        // -(instancetype)initWithLatitude:(BDLocationDegrees)latitude longitude:(BDLocationDegrees)longitude altitude:(BDLocationDistance)altitude accuracy:(BDLocationAccuracy)accuracy altitudeAccuracy:(BDLocationAccuracy)altitudeAccuracy speed:(BDLocationSpeed)speed bearing:(BDLocationDirection)bearing;
        [Export("initWithLatitude:longitude:altitude:accuracy:altitudeAccuracy:speed:bearing:")]
        IntPtr Constructor(double latitude, double longitude, double altitude, double accuracy, double altitudeAccuracy, double speed, double bearing);

        // @property (nonatomic) BDLocationAccuracy accuracy;
        [Export("accuracy")]
        double Accuracy { get; set; }

        // @property (nonatomic) BDLocationAccuracy altitudeAccuracy;
        [Export("altitudeAccuracy")]
        double AltitudeAccuracy { get; set; }

        // @property (nonatomic) BDPoint * point;
        [Export("point", ArgumentSemantic.Assign)]
        BDPoint Point { get; set; }

        // @property (nonatomic) BDLocationDistance altitude;
        [Export("altitude")]
        double Altitude { get; set; }

        // @property (nonatomic) BDLocationSpeed speed;
        [Export("speed")]
        double Speed { get; set; }

        // @property (nonatomic) BDLocationDirection bearing;
        [Export("bearing")]
        double Bearing { get; set; }

        // @property (readonly, nonatomic) NSString * provider;
        [Export("provider")]
        string Provider { get; }

        // @property (nonatomic) NSDate * timestamp;
        [Export("timestamp", ArgumentSemantic.Assign)]
        NSDate Timestamp { get; set; }

        // -(BOOL)isEqualToLocation:(BDLocation *)location;
        [Export("isEqualToLocation:")]
        bool IsEqualToLocation(BDLocation location);
    }

    // @protocol BDPSpatialObject <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface BDPSpatialObject
    {
        // @required -(BDGeometry *)geometry;
        [Abstract]
        [Export("geometry")]
        BDGeometry Geometry { get; }
    }

    // @protocol BDPSpatialObjectInfo <BDPSpatialObject>
    [Protocol]
    interface BDPSpatialObjectInfo : BDPSpatialObject
    {
        // @required @property (readonly, copy) NSString * name;
        [Abstract]
        [Export("name")]
        string Name { get; }

        // @required @property (readonly, copy) NSString * ID;
        [Abstract]
        [Export("ID")]
        string ID { get; }
    }

    // @interface BDFenceInfo : NSObject <BDPSpatialObjectInfo, NSSecureCoding>
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface BDFenceInfo : BDPSpatialObjectInfo, INSSecureCoding
    {
        // @property (readonly, copy) NSString * name;
        [Export("name")]
        new string Name { get; }

        // @property (readonly, copy) NSString * ID;
        [Export("ID")]
        new string ID { get; }

        // @property (readonly) BDGeometry * geometry;
        [Export("geometry")]
        new BDGeometry Geometry { get; }
    }

    // @interface BDLocationInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface BDLocationInfo
    {
        // @property (readonly, copy) NSDate * timestamp;
        [Export("timestamp", ArgumentSemantic.Copy)]
        NSDate Timestamp { get; }

        // @property (readonly) BDLocationDegrees latitude;
        [Export("latitude")]
        double Latitude { get; }

        // @property (readonly) BDLocationDegrees longitude;
        [Export("longitude")]
        double Longitude { get; }

        // @property (readonly) BDLocationDirection bearing;
        [Export("bearing")]
        double Bearing { get; }

        // @property (readonly) BDLocationSpeed speed;
        [Export("speed")]
        double Speed { get; }
    }

    // @interface BDPointSessionException : NSException
    [BaseType(typeof(NSException))]
    [Protocol]
    interface BDPointSessionException
    {
        // +(NSException *)exceptionWithReason:(NSString *)reason;
        [Static]
        [Export("exceptionWithReason:")]
        NSException ExceptionWithReason(string reason);
    }

    // @interface AppInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface AppInfo
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull appBuildVersion;
        [Export("appBuildVersion")]
        string AppBuildVersion { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull minimumOSVersion;
        [Export("minimumOSVersion")]
        string MinimumOSVersion { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull customerApplicationId;
        [Export("customerApplicationId")]
        string CustomerApplicationId { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull sdkVersion;
        [Export("sdkVersion")]
        string SdkVersion { get; }

        // @property (readonly, copy, nonatomic) NSDictionary<NSString *,NSString *> * _Nonnull customEventMetaData;
        [Export("customEventMetaData", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> CustomEventMetaData { get; }

        // -(instancetype _Nonnull)initWithMetaData:(NSDictionary<NSString *,NSString *> * _Nonnull)metaData;
        [Export("initWithMetaData:")]
        IntPtr Constructor(NSDictionary<NSString, NSString> metaData);

        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }

    // @interface AppRestartNotificationConfiguration : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface AppRestartNotificationConfiguration
    {
        // @property (readonly, nonatomic) BOOL requiresAppRestartNotification;
        [Export("requiresAppRestartNotification")]
        bool RequiresAppRestartNotification { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nullable appRestartNotificationTitle;
        [NullAllowed, Export("appRestartNotificationTitle")]
        string AppRestartNotificationTitle { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nullable appRestartNotificationButtonText;
        [NullAllowed, Export("appRestartNotificationButtonText")]
        string AppRestartNotificationButtonText { get; }

        // -(void)disable;
        [Export("disable")]
        void Disable();

        // -(void)enableWithNotificationTitle:(NSString * _Nullable)notificationTitle notificationButtonText:(NSString * _Nullable)notificationButtonText;
        [Export("enableWithNotificationTitle:notificationButtonText:")]
        void EnableWithNotificationTitle([NullAllowed] string notificationTitle, [NullAllowed] string notificationButtonText);
    }

    // @interface AppState : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface AppState
    {
        // @property (readonly, nonatomic) NSDecimal batteryLevel;
        [Export("batteryLevel")]
        NSDecimal BatteryLevel { get; }

        // @property (readonly, nonatomic) BOOL blueBarEnabled;
        [Export("blueBarEnabled")]
        bool BlueBarEnabled { get; }

        // @property (readonly, copy, nonatomic) NSDate * _Nullable lastRuleDownload;
        [NullAllowed, Export("lastRuleDownload", ArgumentSemantic.Copy)]
        NSDate LastRuleDownload { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull locationPermission;
        [Export("locationPermission")]
        string LocationPermission { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull notificationPermission;
        [Export("notificationPermission")]
        string NotificationPermission { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull viewState;
        [Export("viewState")]
        string ViewState { get; }

        // -(instancetype _Nonnull)initWithLastRuleDownload:(NSDate * _Nullable)lastRuleDownload osRestrictions:(NSArray<NSString *> * _Nonnull)osRestrictions;
        [Export("initWithLastRuleDownload:osRestrictions:")]
        IntPtr Constructor([NullAllowed] NSDate lastRuleDownload, string[] osRestrictions);

        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }

    // @interface CrossedFence : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface CrossedFence
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull fenceId;
        [Export("fenceId")]
        string FenceId { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull fenceName;
        [Export("fenceName")]
        string FenceName { get; }

        // @property (readonly, copy, nonatomic) NSDate * _Nonnull crossTime;
        [Export("crossTime", ArgumentSemantic.Copy)]
        NSDate CrossTime { get; }

        // @property (readonly, nonatomic, strong) CLLocation * _Nonnull location;
        [Export("location", ArgumentSemantic.Strong)]
        CLLocation Location { get; }

        // -(instancetype _Nonnull)initWithFenceId:(NSString * _Nonnull)fenceId fenceName:(NSString * _Nonnull)fenceName location:(CLLocation * _Nonnull)location crossTime:(NSDate * _Nonnull)crossTime __attribute__((objc_designated_initializer));
        [Export("initWithFenceId:fenceName:location:crossTime:")]
        [DesignatedInitializer]
        IntPtr Constructor(string fenceId, string fenceName, CLLocation location, NSDate crossTime);

        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }

    // @interface Destination : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface Destination
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull destinationId;
        [Export("destinationId")]
        string DestinationId { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nullable name;
        [NullAllowed, Export("name")]
        string Name { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nullable address;
        [NullAllowed, Export("address")]
        string Address { get; }

        // @property (readonly, nonatomic, strong) BDPoint * _Nonnull location;
        [Export("location", ArgumentSemantic.Strong)]
        BDPoint Location { get; }

        // -(instancetype _Nonnull)initWithDestinationId:(NSString * _Nonnull)destinationId name:(NSString * _Nullable)name address:(NSString * _Nullable)address location:(BDPoint * _Nonnull)location __attribute__((objc_designated_initializer));
        [Export("initWithDestinationId:name:address:location:")]
        [DesignatedInitializer]
        IntPtr Constructor(string destinationId, [NullAllowed] string name, [NullAllowed] string address, BDPoint location);

        // -(instancetype _Nonnull)initWithDestination:(Destination * _Nonnull)destination;
        [Export("initWithDestination:")]
        IntPtr Constructor(Destination destination);

        // -(instancetype _Nullable)initWithDictionary:(NSDictionary * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error;
        [Export("initWithDictionary:error:")]
        IntPtr Constructor(NSDictionary dictionary, [NullAllowed] out NSError error);

        // -(NSString* _Nullable) toJson:(NSError* _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);

        // -(NSDictionary * _Nullable)dictionaryRepresentation __attribute__((warn_unused_result("")));
        [NullAllowed, Export("dictionaryRepresentation")]
        NSDictionary DictionaryRepresentation { get; }
    }

    // @interface DeviceInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface DeviceInfo
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull deviceType;
        [Export("deviceType")]
        string DeviceType { get; }

        // @property (readonly, nonatomic, strong) OperatingSystemInfo * _Nonnull osInfo;
        [Export("osInfo", ArgumentSemantic.Strong)]
        OperatingSystemInfo OsInfo { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nullable advertisingId;
        [NullAllowed, Export("advertisingId")]
        string AdvertisingId { get; }

        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }


    // @protocol Event <NSObject>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface Event
    {
        // @required @property (readonly, nonatomic) enum EventType eventType;
        [Abstract]
        [Export("eventType")]
        EventType EventType { get; }

        // @required @property (readonly, copy, nonatomic) NSDate * _Nonnull eventTime;
        [Abstract]
        [Export("eventTime", ArgumentSemantic.Copy)]
        NSDate EventTime { get; }

        // @required @property (readonly, copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Abstract]
        [Export("timeZoneIdentifier")]
        string TimeZoneIdentifier { get; }

        // @required @property (readonly, nonatomic) enum TriggerEngine triggerEngine;
        [Abstract]
        [Export("triggerEngine")]
        TriggerEngine TriggerEngine { get; }

        // @required @property (readonly, nonatomic, strong) AppState * _Nonnull appState;
        [Abstract]
        [Export("appState", ArgumentSemantic.Strong)]
        AppState AppState { get; }
    }

    // @interface FenceEntered : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface FenceEntered
    {
        // @property (readonly, nonatomic) enum EventType eventType;
        [Export("eventType")]
        EventType EventType { get; }

        // @property (readonly, copy, nonatomic) NSDate * _Nonnull eventTime;
        [Export("eventTime", ArgumentSemantic.Copy)]
        NSDate EventTime { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull fenceName;
        [Export("fenceName")]
        string FenceName { get; }

        // @property (readonly, copy, nonatomic) NSUUID * _Nonnull fenceId;
        [Export("fenceId", ArgumentSemantic.Copy)]
        NSUuid FenceId { get; }

        // @property (readonly, copy, nonatomic) NSArray<CLLocation *> * _Nonnull locations;
        [Export("locations", ArgumentSemantic.Copy)]
        CLLocation[] Locations { get; }

        // @property (readonly, nonatomic, strong) AppState * _Nonnull appState;
        [Export("appState", ArgumentSemantic.Strong)]
        AppState AppState { get; }

        // @property (readonly, copy, nonatomic) NSArray<CrossedFence *> * _Nullable crossedFences;
        [NullAllowed, Export("crossedFences", ArgumentSemantic.Copy)]
        CrossedFence[] CrossedFences { get; }

        // @property (readonly, nonatomic) enum TriggerEngine triggerEngine;
        [Export("triggerEngine")]
        TriggerEngine TriggerEngine { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Export("timeZoneIdentifier")]
        string TimeZoneIdentifier { get; }

        // @property (readonly, copy, nonatomic) NSUUID * _Nonnull uniqueId;
        [Export("uniqueId", ArgumentSemantic.Copy)]
        NSUuid UniqueId { get; }

        // -(instancetype _Nonnull)initWithFenceId:(NSUUID * _Nonnull)fenceId fenceName:(NSString * _Nonnull)fenceName eventTime:(NSDate * _Nonnull)eventTime locations:(NSArray<CLLocation *> * _Nonnull)locations appState:(AppState * _Nonnull)appState crossedFences:(NSArray<CrossedFence *> * _Nullable)crossedFences;
        [Export("initWithFenceId:fenceName:eventTime:locations:appState:crossedFences:")]
        IntPtr Constructor(NSUuid fenceId, string fenceName, NSDate eventTime, CLLocation[] locations, AppState appState, [NullAllowed] CrossedFence[] crossedFences);

        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }

    // @protocol TriggerEvent <Event, NSCopying>
    [Protocol, Model]
    [BaseType(typeof(NSObject))]
    interface TriggerEvent : Event
    {
        // @required @property (readonly, copy, nonatomic) NSString * _Nonnull fenceName;
        [Abstract]
        [Export("fenceName")]
        string FenceName { get; }

        // @required @property (readonly, copy, nonatomic) NSUUID * _Nonnull fenceId;
        [Abstract]
        [Export("fenceId", ArgumentSemantic.Copy)]
        NSUuid FenceId { get; }

        // @required @property (readonly, copy, nonatomic) NSArray<CLLocation *> * _Nonnull locations;
        [Abstract]
        [Export("locations", ArgumentSemantic.Copy)]
        CLLocation[] Locations { get; }

        // @required @property (readonly, copy, nonatomic) NSUUID * _Nonnull uniqueId;
        [Abstract]
        [Export("uniqueId", ArgumentSemantic.Copy)]
        NSUuid UniqueId { get; }
    }
   
    // @interface FenceExited : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface FenceExited
    {
        // @property (readonly, nonatomic) enum EventType eventType;
        [Export("eventType")]
        EventType EventType { get; }

        // @property (readonly, copy, nonatomic) NSDate * _Nonnull eventTime;
        [Export("eventTime", ArgumentSemantic.Copy)]
        NSDate EventTime { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull fenceName;
        [Export("fenceName")]
        string FenceName { get; }

        // @property (readonly, copy, nonatomic) NSUUID * _Nonnull fenceId;
        [Export("fenceId", ArgumentSemantic.Copy)]
        NSUuid FenceId { get; }

        // @property (readonly, copy, nonatomic) NSArray<CLLocation *> * _Nonnull locations;
        [Export("locations", ArgumentSemantic.Copy)]
        CLLocation[] Locations { get; }

        // @property (readonly, nonatomic, strong) AppState * _Nonnull appState;
        [Export("appState", ArgumentSemantic.Strong)]
        AppState AppState { get; }

        // @property (readonly, nonatomic) enum TriggerEngine triggerEngine;
        [Export("triggerEngine")]
        TriggerEngine TriggerEngine { get; }

        // @property (readonly, nonatomic) float distance;
        [Export("distance")]
        float Distance { get; }

        // @property (readonly, nonatomic) float distanceRequired;
        [Export("distanceRequired")]
        float DistanceRequired { get; }

        // @property (readonly, nonatomic) NSTimeInterval dwellTime;
        [Export("dwellTime")]
        double DwellTime { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Export("timeZoneIdentifier")]
        string TimeZoneIdentifier { get; }

        // @property (readonly, copy, nonatomic) NSUUID * _Nonnull uniqueId;
        [Export("uniqueId", ArgumentSemantic.Copy)]
        NSUuid UniqueId { get; }

        // -(instancetype _Nonnull)initWithFenceId:(NSUUID * _Nonnull)fenceId fenceName:(NSString * _Nonnull)fenceName eventTime:(NSDate * _Nonnull)eventTime locations:(NSArray<CLLocation *> * _Nonnull)locations dwellTime:(NSTimeInterval)dwellTime distance:(float)distance distanceRequired:(float)distanceRequired appState:(AppState * _Nonnull)appState;
        [Export("initWithFenceId:fenceName:eventTime:locations:dwellTime:distance:distanceRequired:appState:")]
        IntPtr Constructor(NSUuid fenceId, string fenceName, NSDate eventTime, CLLocation[] locations, double dwellTime, float distance, float distanceRequired, AppState appState);

        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }

    // @interface GeoTriggerEvent : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface GeoTriggerEvent
    {
        // @property (readonly, copy, nonatomic) NSUUID * _Nonnull installRef;
        [Export("installRef", ArgumentSemantic.Copy)]
        NSUuid InstallRef { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull projectId;
        [Export("projectId")]
        string ProjectId { get; }

        // @property (readonly, nonatomic, strong) DeviceInfo * _Nonnull deviceInfo;
        [Export("deviceInfo", ArgumentSemantic.Strong)]
        DeviceInfo DeviceInfo { get; }

        // @property (readonly, copy, nonatomic) NSUUID * _Nonnull triggerChainId;
        [Export("triggerChainId", ArgumentSemantic.Copy)]
        NSUuid TriggerChainId { get; }

        // @property (readonly, nonatomic) enum NotificationType notificationType;
        [Export("notificationType")]
        NotificationType NotificationType { get; }

        // @property (readonly, nonatomic, strong) ZoneInfo * _Nonnull zoneInfo;
        [Export("zoneInfo", ArgumentSemantic.Strong)]
        ZoneInfo ZoneInfo { get; }

        // @property (readonly, nonatomic, strong) AppInfo * _Nonnull appInfo;
        [Export("appInfo", ArgumentSemantic.Strong)]
        AppInfo AppInfo { get; }

        // @property (readonly, copy, nonatomic) NSArray<id<TriggerEvent>> * _Nonnull triggerEvents;
        [Export("triggerEvents", ArgumentSemantic.Copy)]
        TriggerEvent[] TriggerEvents { get; }

        // @property (readonly, nonatomic, strong) FenceEntered * _Nullable entryEvent;
        [NullAllowed, Export("entryEvent", ArgumentSemantic.Strong)]
        FenceEntered EntryEvent { get; }

        // @property (readonly, nonatomic, strong) FenceExited * _Nullable exitEvent;
        [NullAllowed, Export("exitEvent", ArgumentSemantic.Strong)]
        FenceExited ExitEvent { get; }

        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }

    // @protocol LifecycleEvent <Event>
    [Protocol]
    interface LifecycleEvent : Event
    {
        // @required @property (readonly, copy, nonatomic) NSUUID * _Nonnull uniqueId;
        [Abstract]
        [Export("uniqueId", ArgumentSemantic.Copy)]
        NSUuid UniqueId { get; }
    }

    // @interface GeoTriggerStart : NSObject <LifecycleEvent>
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface GeoTriggerStart : LifecycleEvent
    {
        // @property (readonly, nonatomic) enum EventType eventType;
        [Export("eventType")]
        new EventType EventType { get; }

        // @property (copy, nonatomic) NSDate * _Nonnull eventTime;
        [Export("eventTime", ArgumentSemantic.Copy)]
        new NSDate EventTime { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Export("timeZoneIdentifier")]
        new string TimeZoneIdentifier { get; set; }

        // @property (nonatomic) enum TriggerEngine triggerEngine;
        [Export("triggerEngine", ArgumentSemantic.Assign)]
        new TriggerEngine TriggerEngine { get; set; }

        // @property (nonatomic, strong) AppState * _Nonnull appState;
        [Export("appState", ArgumentSemantic.Strong)]
        new AppState AppState { get; set; }

        // @property (copy, nonatomic) NSUUID * _Nonnull uniqueId;
        [Export("uniqueId", ArgumentSemantic.Copy)]
        new NSUuid UniqueId { get; set; }

        // -(instancetype _Nonnull)initWithAppState:(AppState * _Nonnull)appState;
        [Export("initWithAppState:")]
        IntPtr Constructor(AppState appState);
    }

    // @interface GeoTriggerStop : NSObject <LifecycleEvent>
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface GeoTriggerStop : LifecycleEvent
    {
        // @property (readonly, nonatomic) enum EventType eventType;
        [Export("eventType")]
        new EventType EventType { get; }

        // @property (copy, nonatomic) NSDate * _Nonnull eventTime;
        [Export("eventTime", ArgumentSemantic.Copy)]
        new NSDate EventTime { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Export("timeZoneIdentifier")]
        new string TimeZoneIdentifier { get; set; }

        // @property (nonatomic) enum TriggerEngine triggerEngine;
        [Export("triggerEngine", ArgumentSemantic.Assign)]
        new TriggerEngine TriggerEngine { get; set; }

        // @property (nonatomic, strong) AppState * _Nonnull appState;
        [Export("appState", ArgumentSemantic.Strong)]
        new AppState AppState { get; set; }

        // @property (copy, nonatomic) NSUUID * _Nonnull uniqueId;
        [Export("uniqueId", ArgumentSemantic.Copy)]
        new NSUuid UniqueId { get; set; }

        // -(instancetype _Nonnull)initWithAppState:(AppState * _Nonnull)appState;
        [Export("initWithAppState:")]
        IntPtr Constructor(AppState appState);
    }

    // @interface OperatingSystemInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface OperatingSystemInfo
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull version;
        [Export("version")]
        string Version { get; }
    }

    // @interface SdkInit : NSObject <LifecycleEvent>
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface SdkInit : LifecycleEvent
    {
        // @property (readonly, nonatomic) enum EventType eventType;
        [Export("eventType")]
        new EventType EventType { get; }

        // @property (copy, nonatomic) NSDate * _Nonnull eventTime;
        [Export("eventTime", ArgumentSemantic.Copy)]
        new NSDate EventTime { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Export("timeZoneIdentifier")]
        new string TimeZoneIdentifier { get; set; }

        // @property (nonatomic) enum TriggerEngine triggerEngine;
        [Export("triggerEngine", ArgumentSemantic.Assign)]
        new TriggerEngine TriggerEngine { get; set; }

        // @property (nonatomic, strong) AppState * _Nonnull appState;
        [Export("appState", ArgumentSemantic.Strong)]
        new AppState AppState { get; set; }

        // @property (copy, nonatomic) NSUUID * _Nonnull uniqueId;
        [Export("uniqueId", ArgumentSemantic.Copy)]
        new NSUuid UniqueId { get; set; }

        // -(instancetype _Nonnull)initWithAppState:(AppState * _Nonnull)appState;
        [Export("initWithAppState:")]
        IntPtr Constructor(AppState appState);
    }

    // @interface SdkReset : NSObject <LifecycleEvent>
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface SdkReset : LifecycleEvent
    {
        // @property (readonly, nonatomic) enum EventType eventType;
        [Export("eventType")]
        new EventType EventType { get; }

        // @property (copy, nonatomic) NSDate * _Nonnull eventTime;
        [Export("eventTime", ArgumentSemantic.Copy)]
        new NSDate EventTime { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Export("timeZoneIdentifier")]
        new string TimeZoneIdentifier { get; set; }

        // @property (nonatomic) enum TriggerEngine triggerEngine;
        [Export("triggerEngine", ArgumentSemantic.Assign)]
        new TriggerEngine TriggerEngine { get; set; }

        // @property (nonatomic, strong) AppState * _Nonnull appState;
        [Export("appState", ArgumentSemantic.Strong)]
        new AppState AppState { get; set; }

        // @property (copy, nonatomic) NSUUID * _Nonnull uniqueId;
        [Export("uniqueId", ArgumentSemantic.Copy)]
        new NSUuid UniqueId { get; set; }

        // -(instancetype _Nonnull)initWithAppState:(AppState * _Nonnull)appState;
        [Export("initWithAppState:")]
        IntPtr Constructor(AppState appState);
    }

    // @protocol TempoEvent <Event>
    [Protocol]
    interface TempoEvent : Event
    {
        // @required @property (readonly, copy, nonatomic) NSString * _Nonnull destinationId;
        [Abstract]
        [Export("destinationId")]
        string DestinationId { get; }
    }

    // @interface TempoStop : NSObject <TempoEvent>
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface TempoStop : TempoEvent
    {
        // @property (readonly, nonatomic) enum EventType eventType;
        [Export("eventType")]
        new EventType EventType { get; }

        // @property (copy, nonatomic) NSDate * _Nonnull eventTime;
        [Export("eventTime", ArgumentSemantic.Copy)]
        new NSDate EventTime { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Export("timeZoneIdentifier")]
        new string TimeZoneIdentifier { get; set; }

        // @property (nonatomic) enum TriggerEngine triggerEngine;
        [Export("triggerEngine", ArgumentSemantic.Assign)]
        new TriggerEngine TriggerEngine { get; set; }

        // @property (nonatomic, strong) AppState * _Nonnull appState;
        [Export("appState", ArgumentSemantic.Strong)]
        new AppState AppState { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull destinationId;
        [Export("destinationId")]
        new string DestinationId { get; set; }

        // -(instancetype _Nonnull)initWithDestinationId:(NSString * _Nonnull)destinationId stopReason:(enum TempoStopReason)stopReason appState:(AppState * _Nonnull)appState;
        [Export("initWithDestinationId:stopReason:appState:")]
        IntPtr Constructor(string destinationId, TempoStopReason stopReason, AppState appState);
    }

    // @interface TempoTrackingUpdate : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface TempoTrackingUpdate
    {
        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }

    // @interface TempoUpdate : NSObject <TempoEvent>
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface TempoUpdate : TempoEvent
    {
        // @property (readonly, nonatomic) enum EventType eventType;
        [Export("eventType")]
        new EventType EventType { get; }

        // @property (copy, nonatomic) NSDate * _Nonnull eventTime;
        [Export("eventTime", ArgumentSemantic.Copy)]
        new NSDate EventTime { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull timeZoneIdentifier;
        [Export("timeZoneIdentifier")]
        new string TimeZoneIdentifier { get; set; }

        // @property (nonatomic) enum TriggerEngine triggerEngine;
        [Export("triggerEngine", ArgumentSemantic.Assign)]
        new TriggerEngine TriggerEngine { get; set; }

        // @property (nonatomic, strong) AppState * _Nonnull appState;
        [Export("appState", ArgumentSemantic.Strong)]
        new AppState AppState { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull destinationId;
        [Export("destinationId")]
        new string DestinationId { get; set; }

        // -(instancetype _Nonnull)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations destinationId:(NSString * _Nonnull)destinationId appState:(AppState * _Nonnull)appState;
        [Export("initWithLocations:destinationId:appState:")]
        IntPtr Constructor(CLLocation[] locations, string destinationId, AppState appState);
    }

    // @interface ZoneInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    [DisableDefaultCtor]
    interface ZoneInfo
    {
        // @property (readonly, copy, nonatomic) NSUUID * _Nonnull id;
        [Export("id", ArgumentSemantic.Copy)]
        NSUuid Id { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; }

        // @property (readonly, copy, nonatomic) NSDictionary<NSString *,NSString *> * _Nonnull customData;
        [Export("customData", ArgumentSemantic.Copy)]
        NSDictionary<NSString, NSString> CustomData { get; }

        // -(instancetype _Nonnull)initWithId:(NSUUID * _Nonnull)id name:(NSString * _Nonnull)name customData:(NSDictionary<NSString *,NSString *> * _Nonnull)customData uniqueId:(NSUUID * _Nonnull)uniqueId __attribute__((objc_designated_initializer));
        [Export("initWithId:name:customData:uniqueId:")]
        [DesignatedInitializer]
        IntPtr Constructor(NSUuid id, string name, NSDictionary<NSString, NSString> customData, NSUuid uniqueId);

        // -(instancetype _Nonnull)initWithZone:(ZoneInfo * _Nonnull)zone;
        [Export("initWithZone:")]
        IntPtr Constructor(ZoneInfo zone);

        // -(NSString * _Nullable)toJson:(NSError * _Nullable * _Nullable)error __attribute__((warn_unused_result("")));
        [Export("toJson:")]
        [return: NullAllowed]
        string ToJson([NullAllowed] out NSError error);
    }
}